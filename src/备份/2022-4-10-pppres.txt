/* phase and code residuals --------------------------------------------------*/
static int ppp_res(const int mode, const obsd_t *obs, int n, const double *rs, const double *dts, const double *var_rs, 
	const int *svh, const nav_t *nav, const double *x, rtk_t *rtk, double *v, double *H, double *var, int *vflg)
{
	int i, j, k, sat, sys, flg, nv = 0, stat = 0, nx = rtk->nx;
	char str[32], id[32];
	prcopt_t *opt = &rtk->opt;
	double freq[NFREQ] = { 0 }, y, r, cdtr, bias, C, rr[3], pos[3], e[3], dtdx[3], L[NFREQ], P[NFREQ], Lc, Pc;
	double dtrp = 0.0, dion = 0.0, vart = 0.0, vari = 0.0, ifb;
	double dantr[NFREQ] = { 0 }, dants[NFREQ] = { 0 }, *azel, *hh, vv, qq;

	time2str(obs[0].time, str, 0);

	hh = mat(nx, 1);
	for (i = 0; i < MAXSAT; i++) for (j = 0; j < opt->nf; j++) rtk->ssat[i].vsat[j] = 0;

	for (i = 0; i<3; i++) rr[i] = x[i] + rtk->dr[i];
	ecef2pos(rr, pos);
	for (i = 0; i<n&&i<MAXOBS; i++) {
		sat = obs[i].sat;
		satno2id(sat, id);
		azel = rtk->ssat[sat - 1].azel;

		for (j = 0; j < NFREQ; j++) freq[j] = sat2freq(sat, obs[i].code[j], nav);			

		if ((r = geodist(rs + i * 6, rr, e)) <= 0.0 || satazel(pos, e, azel)<opt->elmin) {			
			continue;
		}
		if (!(sys = satsys(sat, NULL)) || !rtk->ssat[sat - 1].vs || satexclude(obs[i].sat, svh[i], opt)) {							
			continue;
		}
		
		/* tropospheric and ionospheric model */
		if (!tropcorr(obs[i].time, pos, azel, opt, x, dtdx, nav, &dtrp, &vart) ||
			!ionocorr(obs[i].time, pos, azel, opt, sat, x, nav, &dion, &vari)) {
			continue;
		}

		/* satellite and receiver antenna model */
		if (opt->posopt[0]) satantpcv(rs + i * 6, rr, nav->pcvs + sat - 1, dants);
		antmodel(opt->pcvr, opt->antdel[0], azel, opt->posopt[1], dantr);

		/* phase windup model */
		if (!model_phw(rtk->sol.time, sat, nav->pcvs[sat - 1].type, opt->posopt[2] ? 2 : 0, rs + i * 6, rr, &rtk->ssat[sat - 1].phw)) {	
			continue;
		}

		/* corrected phase and code measurements */
		corr_meas(obs + i, nav, azel, &rtk->opt, dantr, dants, rtk->ssat[sat - 1].phw, rtk->ssat[sat - 1].php, L, P, &Lc, &Pc);

		/* stack phase and code residuals {L1,P1,L2,P2,...} */
		for (j = 0; j < 2 * NF(opt); j++) {										

			bias = ifb = 0.0;

			if (exc[j + i * 2 * NFREQ]) continue;				

			if (opt->ionoopt == IONOOPT_IFLC) {						
				if ((y = j % 2 == 0 ? Lc : Pc) == 0.0) continue;			
			}
			else {
				if ((y = j % 2 == 0 ? L[j / 2] : P[j / 2]) == 0.0) continue;
				if (freq[j / 2] == 0.0 || freq[0] == 0.0) continue;
			}

			/* coordinate */
			for (k = 0; k < nx; k++) hh[k] = k < 3 ? -e[k] : 0.0;

			/* receiver clock */
			k = sys == SYS_GLO ? 1 : (sys == SYS_GAL ? 2 : (sys == SYS_CMP ? 3 : 0));				
			cdtr = x[IC(k, opt)];
			hh[IC(k, opt)] = 1.0;

			/* Trop */
			if (opt->tropopt == TROPOPT_EST || opt->tropopt == TROPOPT_ESTG) {
				for (k = 0; k<(opt->tropopt >= TROPOPT_ESTG ? 3 : 1); k++) {
					hh[IT(opt) + k] = dtdx[k];
				}
			}

			/* Iono */
			C = SQR(freq[0] / freq[j / 2])*(j % 2 == 0 ? -1.0 : 1.0);	
			if (opt->ionoopt == IONOOPT_EST) {
				if (rtk->x[II(sat, opt)] == 0.0) continue;
				hh[II(sat, opt)] = C;
			}

			/* phase bias */
			if (j % 2 == 0) {
				if ((bias = x[IB(sat, j / 2, opt)]) == 0.0) continue;
				hh[IB(sat, j / 2, opt)] = 1.0;
			}

			/* Inter frequency bias */
			if (j % 2 != 0 && j / 2 > 1) {
				if ((ifb = x[IS(sat, opt)]) == 0.0) continue;
				hh[IS(sat, opt)] = 1.0;
			}

			/* residual */
			vv = y - (r + cdtr - CLIGHT*dts[i * 2] + dtrp + C*dion + ifb + bias);

			/* variance */
			if (j % 2 == 0) qq = varerr(obs[i].sat, azel[1], j / 2, j % 2, opt) + vart + SQR(C)*vari + var_rs[i];
			if (j % 2 == 1)	qq = varerr(obs[i].sat, azel[1], j / 2, j % 2, opt) + vart + SQR(C)*vari + var_rs[i] + ERR_CBIAS;
			if (sys == SYS_GLO && j % 2 == 1) qq += ERR_GLO_IFB;

			/* reject satellite by pre-fit residuals */
			if(!mode) {
				if (opt->maxinno > 0.0 && fabs(vv) > opt->maxinno) {
					trace(2, "pre  outlier rejected %s %s%d res=%9.4f el=%4.1f\n", id, j % 2 ? "P" : "L", j / 2 + 1, vv, azel[1] * R2D);
					continue;
				}
				if (j % 2 == 0) rtk->ssat[sat - 1].vsat[j / 2] = 1;
				v[nv] = vv;			var[nv] = qq;			matcpy(H + nx*nv, hh, nx, 1);			nv++;
			}

			flg = (sat << 8) | ((j / 2) << 4) | (j % 2) << 1 | 1;
			if (v) v[nv] = vv;
			if (var) var[nv] = qq;
			if (H) matcpy(H + nx*nv, hh, nx, 1);
			if (vflg) vflg[nv] = flg;
			nv++;
			/* reject satellite by pos-fit residuals */
			if( mode) {
				if (j % 2 == 0) rtk->ssat[sat - 1].resc[j / 2] = vv;
				if (j % 2 == 1)	rtk->ssat[sat - 1].resp[j / 2] = vv;
				if (fabs(vv) > sqrt(qq)*THRES_REJECT) {
					trace(2, "post outlier rejected %s sys=%2d %s %s%d res=%9.4f el=%4.1f\n", str, sys, id, j % 2 ? "P" : "L", j / 2 + 1, vv, azel[1] * R2D);
					stat++;
					continue;
				}
				if (j % 2 == 0) rtk->ssat[sat - 1].vsat[j / 2] = 1;
			}

		}	//end styple
	}	//end obs
	free(hh);
	return !mode ? nv : stat;
}